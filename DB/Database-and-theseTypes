# Домашнее задание к занятию "Базы данных и их типы" - `Хамуро Илья`

### Задание 1
Кейс
Крупная строительная компания, которая также занимается проектированием и девелопментом, решила создать правильную архитектуру для работы с данными. Ниже представлены задачи, которые необходимо решить для каждой предметной области.

Какие типы СУБД, на ваш взгляд, лучше всего подойдут для решения этих задач и почему?

1.1. Бюджетирование проектов с дальнейшим формированием финансовых аналитических отчётов и прогнозирования рисков. СУБД должна гарантировать целостность и чёткую структуру данных.

Рекомендуемая СУБД: Реляционная (PostgreSQL, Microsoft SQL Server, Oracle)
Почему?

- Требуется строгая структура, ACID-гарантии, сложные JOIN-запросы для аналитики.

- Поддержка транзакций критична для финансовых данных.

- Возможность интеграции с BI-инструментами (Power BI, Tableau).

1.1.* Хеширование стало занимать длительно время, какое API можно использовать для ускорения работы?

API: Можно использовать Redis API (кеширование промежуточных результатов) или специализированные библиотеки (например, Google CityHash для быстрого хеширования).

1.2. Под каждый девелоперский проект создаётся отдельный лендинг, и все данные по лидам стекаются в CRM к маркетологам и менеджерам по продажам. Какой тип СУБД лучше использовать для лендингов и для CRM? СУБД должны быть гибкими и быстрыми.

Рекомендуемые СУБД:

Лендинги: Документоориентированная (MongoDB, Firebase) – гибкость, быстрое чтение/запись.

CRM: Реляционная (PostgreSQL) или гибрид (MongoDB + SQL для аналитики).

1.2.* Можно ли эту задачу закрыть одной СУБД? И если да, то какой именно СУБД и какой реализацией?

Да, если: Использовать PostgreSQL с JSONB (гибкость для лендингов + структура для CRM).

Альтернатива – MongoDB (если CRM не требует сложных JOIN).

1.3. Отдел контроля качества решил создать базу по корпоративным нормам и правилам, обучающему материалу и так далее, сформированную согласно структуре компании. СУБД должна иметь простую и понятную структуру.

Рекомендуемая СУБД: Графовая (Neo4j) или реляционная (PostgreSQL).
Почему?

Если данные иерархичны (например, дерево документов), подойдёт PostgreSQL с рекурсивными запросами.

Если важны связи (например, правила → отделы → проекты), лучше Neo4j.

1.3.* Можно ли под эту задачу использовать уже существующую СУБД из задач выше и если да, то как лучше это реализовать?

Да, если: Взять PostgreSQL из 1.1 или 1.2 и добавить таблицы для документов.

1.4. Департамент логистики нуждается в решении задач по быстрому формированию маршрутов доставки материалов по объектам и распределению курьеров по маршрутам с доставкой документов. СУБД должна уметь быстро работать со связями.

Рекомендуемая СУБД: Графовая (Neo4j) или реляционная с гео-расширениями (PostgreSQL + PostGIS).
Почему?

Графы идеальны для маршрутизации (поиск кратчайшего пути).

PostGIS удобен для работы с координатами.

1.4.* Можно ли к этой СУБД подключить отдел закупок или для них лучше сформировать свою СУБД в связке с СУБД логистов?

Да, если: Использовать PostgreSQL (логистика + закупки в одной схеме).

Нет, если: Закупкам нужна специализированная система (например, ERP-модуль).

1.5.* Можно ли все перечисленные выше задачи решить, используя одну СУБД? Если да, то какую именно?

PostgreSQL (с JSONB, PostGIS, рекурсивными запросами) покрывает 90% задач:

Финансы (1.1) – транзакции.

CRM (1.2) – гибкость через JSONB.

База знаний (1.3) – иерархии.

Логистика (1.4) – PostGIS.

Исключение: Для сложной маршрутизации лучше добавить Neo4j.

Альтернатива:

MongoDB + PostgreSQL + Redis (оптимально для масштабирования).
